{"version":3,"file":"trezor-keyring.js","sourceRoot":"","sources":["../src/trezor-keyring.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport * as ethUtil from '@ethereumjs/util'\nimport HDKey from 'hdkey'\nimport TrezorConnect, {\n  Device,\n  DeviceEventMessage,\n  DEVICE_EVENT,\n  EthereumTransactionEIP1559,\n} from '@trezor/connect-web'\nimport type { EthereumSignedTx, EthereumTransaction } from '@trezor/connect-web'\nimport { TransactionFactory } from '@ethereumjs/tx'\nimport type { TypedTransaction, TxData } from '@ethereumjs/tx'\nimport type OldEthJsTransaction from 'ethereumjs-tx'\nimport { transformTypedData } from '@trezor/connect-plugin-ethereum'\nimport {\n  TypedMessage,\n  SignTypedDataVersion,\n  MessageTypes,\n} from '@metamask/eth-sig-util'\nimport { hasProperty } from '@metamask/utils'\n\nconst hdPathString = `m/44'/60'/0'/0`\nconst SLIP0044TestnetPath = `m/44'/1'/0'/0`\n\nconst ALLOWED_HD_PATHS = {\n  [hdPathString]: true,\n  [SLIP0044TestnetPath]: true,\n} as const\n\nconst keyringType = 'Trezor Hardware'\nconst pathBase = 'm'\nconst MAX_INDEX = 1000\nconst DELAY_BETWEEN_POPUPS = 1000\nconst TREZOR_CONNECT_MANIFEST = {\n  email: 'support@metamask.io',\n  appUrl: 'https://metamask.io',\n}\n\nexport interface TrezorControllerOptions {\n  hdPath?: string\n  accounts?: string[]\n  page?: number\n  perPage?: number\n}\n\nexport interface TrezorControllerState {\n  hdPath: string\n  accounts: readonly string[]\n  page: number\n  paths: Record<string, number>\n  perPage: number\n  unlockedAccount: number\n}\n\nasync function wait(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Checks if a Trezor Device Event Message is\n * an event message with `event.payload` as Device\n * and with property `features`\n *\n * @param event Trezor device event message\n * @returns\n */\nfunction hasDevicePayload(\n  event: DeviceEventMessage,\n): event is DeviceEventMessage & { payload: Device } {\n  return hasProperty(event.payload, 'features')\n}\n\n/**\n * Check if the given transaction is made with ethereumjs-tx or @ethereumjs/tx\n *\n * Transactions built with older versions of ethereumjs-tx have a\n * getChainId method that newer versions do not.\n * Older versions are mutable\n * while newer versions default to being immutable.\n * Expected shape and type\n * of data for v, r and s differ (Buffer (old) vs BN (new)).\n *\n * @param tx\n * @returns Returns `true` if tx is an old-style ethereumjs-tx transaction.\n */\nfunction isOldStyleEthereumjsTx(\n  tx: TypedTransaction | OldEthJsTransaction,\n): tx is OldEthJsTransaction {\n  return typeof (tx as OldEthJsTransaction).getChainId === 'function'\n}\n\nexport class TrezorKeyring extends EventEmitter {\n  static type: string = keyringType\n\n  readonly type: string = keyringType\n\n  accounts: readonly string[] = []\n\n  hdk: HDKey = new HDKey()\n\n  hdPath: string = hdPathString\n\n  page = 0\n\n  perPage = 5\n\n  unlockedAccount = 0\n\n  paths: Record<string, number> = {}\n\n  trezorConnectInitiated = false\n\n  model?: string\n\n  constructor(opts: TrezorControllerOptions = {}) {\n    super()\n    this.deserialize(opts)\n\n    TrezorConnect.on(DEVICE_EVENT, (event) => {\n      if (hasDevicePayload(event)) {\n        this.model = event.payload.features?.model\n      }\n    })\n\n    if (!this.trezorConnectInitiated) {\n      TrezorConnect.init({\n        manifest: TREZOR_CONNECT_MANIFEST,\n        lazyLoad: true,\n      })\n      this.trezorConnectInitiated = true\n    }\n  }\n\n  /**\n   * Gets the model, if known.\n   * This may be `undefined` if the model hasn't been loaded yet.\n   *\n   * @returns\n   */\n  getModel(): string | undefined {\n    return this.model\n  }\n\n  dispose() {\n    // This removes the Trezor Connect iframe from the DOM\n    // This method is not well documented, but the code it calls can be seen\n    // here: https://github.com/trezor/connect/blob/dec4a56af8a65a6059fb5f63fa3c6690d2c37e00/src/js/iframe/builder.js#L181\n    TrezorConnect.dispose()\n  }\n\n  async serialize(): Promise<TrezorControllerState> {\n    return Promise.resolve({\n      hdPath: this.hdPath,\n      accounts: this.accounts,\n      page: this.page,\n      paths: this.paths,\n      perPage: this.perPage,\n      unlockedAccount: this.unlockedAccount,\n    })\n  }\n\n  async deserialize(opts: TrezorControllerOptions = {}) {\n    this.hdPath = opts.hdPath ?? hdPathString\n    this.accounts = opts.accounts ?? []\n    this.page = opts.page ?? 0\n    this.perPage = opts.perPage ?? 5\n    return Promise.resolve()\n  }\n\n  isUnlocked() {\n    return Boolean(this.hdk?.publicKey)\n  }\n\n  async unlock() {\n    if (this.isUnlocked()) {\n      return Promise.resolve('already unlocked')\n    }\n    return new Promise((resolve, reject) => {\n      TrezorConnect.getPublicKey({\n        path: this.hdPath,\n        coin: 'ETH',\n      })\n        .then((response) => {\n          if (response.success) {\n            this.hdk.publicKey = Buffer.from(response.payload.publicKey, 'hex')\n            this.hdk.chainCode = Buffer.from(response.payload.chainCode, 'hex')\n            resolve('just unlocked')\n          } else {\n            reject(new Error(response.payload?.error || 'Unknown error'))\n          }\n        })\n        .catch((e) => {\n          reject(new Error(e?.toString() || 'Unknown error'))\n        })\n    })\n  }\n\n  setAccountToUnlock(index: number | string) {\n    this.unlockedAccount = parseInt(String(index), 10)\n  }\n\n  async addAccounts(n = 1): Promise<readonly string[]> {\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((_) => {\n          const from = this.unlockedAccount\n          const to = from + n\n\n          for (let i = from; i < to; i++) {\n            const address = this.#addressFromIndex(pathBase, i)\n            if (!this.accounts.includes(address)) {\n              this.accounts = [...this.accounts, address]\n            }\n            this.page = 0\n          }\n          resolve(this.accounts)\n        })\n        .catch((e) => {\n          reject(e)\n        })\n    })\n  }\n\n  async getFirstPage() {\n    this.page = 0\n    return this.#getPage(1)\n  }\n\n  async getNextPage() {\n    return this.#getPage(1)\n  }\n\n  async getPreviousPage() {\n    return this.#getPage(-1)\n  }\n\n  async #getPage(\n    increment: number,\n  ): Promise<{ address: string; balance: number | null; index: number }[]> {\n    this.page += increment\n\n    if (this.page <= 0) {\n      this.page = 1\n    }\n\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((_) => {\n          const from = (this.page - 1) * this.perPage\n          const to = from + this.perPage\n\n          const accounts = []\n\n          for (let i = from; i < to; i++) {\n            const address = this.#addressFromIndex(pathBase, i)\n            accounts.push({\n              address,\n              balance: null,\n              index: i,\n            })\n            this.paths[ethUtil.toChecksumAddress(address)] = i\n          }\n          resolve(accounts)\n        })\n        .catch((e) => {\n          reject(e)\n        })\n    })\n  }\n\n  async getAccounts() {\n    return Promise.resolve(this.accounts.slice())\n  }\n\n  removeAccount(address: string) {\n    if (\n      !this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n    ) {\n      throw new Error(`Address ${address} not found in this keyring`)\n    }\n\n    this.accounts = this.accounts.filter(\n      (a) => a.toLowerCase() !== address.toLowerCase(),\n    )\n  }\n\n  /**\n   * Signs a transaction using Trezor.\n   *\n   * Accepts either an ethereumjs-tx or @ethereumjs/tx transaction, and returns\n   * the same type.\n   *\n   * @param address - Hex string address.\n   * @param tx - Instance of either new-style or old-style ethereumjs transaction.\n   * @returns The signed transaction, an instance of either new-style or old-style\n   * ethereumjs transaction.\n   */\n  async signTransaction(\n    address: string,\n    tx: TypedTransaction | OldEthJsTransaction,\n  ) {\n    if (isOldStyleEthereumjsTx(tx)) {\n      // In this version of ethereumjs-tx we must add the chainId in hex format\n      // to the initial v value. The chainId must be included in the serialized\n      // transaction which is only communicated to ethereumjs-tx in this\n      // value. In newer versions the chainId is communicated via the 'Common'\n      // object.\n      return this.#signTransaction(\n        address,\n        // @types/ethereumjs-tx and old ethereumjs-tx versions document\n        // this function return value as Buffer, but the actual\n        // Transaction._chainId will always be a number.\n        // See https://github.com/ethereumjs/ethereumjs-tx/blob/v1.3.7/index.js#L126\n        tx.getChainId() as unknown as number,\n        tx,\n        (payload) => {\n          tx.v = Buffer.from(payload.v, 'hex')\n          tx.r = Buffer.from(payload.r, 'hex')\n          tx.s = Buffer.from(payload.s, 'hex')\n          return tx\n        },\n      )\n    }\n    return this.#signTransaction(\n      address,\n      Number(tx.common.chainId()),\n      tx,\n      (payload) => {\n        // Because tx will be immutable, first get a plain javascript object that\n        // represents the transaction. Using txData here as it aligns with the\n        // nomenclature of ethereumjs/tx.\n        const txData: TxData = tx.toJSON()\n        // The fromTxData utility expects a type to support transactions with a type other than 0\n        txData.type = tx.type\n        // The fromTxData utility expects v,r and s to be hex prefixed\n        txData.v = ethUtil.addHexPrefix(payload.v)\n        txData.r = ethUtil.addHexPrefix(payload.r)\n        txData.s = ethUtil.addHexPrefix(payload.s)\n        // Adopt the 'common' option from the original transaction and set the\n        // returned object to be frozen if the original is frozen.\n        return TransactionFactory.fromTxData(txData, {\n          common: tx.common,\n          freeze: Object.isFrozen(tx),\n        })\n      },\n    )\n  }\n\n  /**\n   *\n   * @param address - Hex string address.\n   * @param chainId - Chain ID\n   * @param tx - Instance of either new-style or old-style ethereumjs transaction.\n   * @param handleSigning - Converts signed transaction\n   * to the same new-style or old-style ethereumjs-tx.\n   * @returns The signed transaction, an instance of either new-style or old-style\n   * ethereumjs transaction.\n   */\n  async #signTransaction<T extends TypedTransaction | OldEthJsTransaction>(\n    address: string,\n    chainId: number,\n    tx: T,\n    handleSigning: (tx: EthereumSignedTx) => T,\n  ): Promise<T> {\n    let transaction: EthereumTransaction | EthereumTransactionEIP1559\n    if (isOldStyleEthereumjsTx(tx)) {\n      // legacy transaction from ethereumjs-tx package has no .toJSON() function,\n      // so we need to convert to hex-strings manually manually\n      transaction = {\n        to: this.#normalize(tx.to),\n        value: this.#normalize(tx.value),\n        data: this.#normalize(tx.data),\n        chainId,\n        nonce: this.#normalize(tx.nonce),\n        gasLimit: this.#normalize(tx.gasLimit),\n        gasPrice: this.#normalize(tx.gasPrice),\n      }\n    } else {\n      // new-style transaction from @ethereumjs/tx package\n      // we can just copy tx.toJSON() for everything except chainId, which must be a number\n      transaction = {\n        ...tx.toJSON(),\n        chainId,\n        to: this.#normalize(ethUtil.toBuffer(tx.to)),\n      } as EthereumTransaction | EthereumTransactionEIP1559\n    }\n\n    try {\n      const status = await this.unlock()\n      await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0)\n      const response = await TrezorConnect.ethereumSignTransaction({\n        path: this.#pathFromAddress(address),\n        transaction,\n      })\n      if (response.success) {\n        const newOrMutatedTx = handleSigning(response.payload)\n\n        const addressSignedWith = ethUtil.toChecksumAddress(\n          ethUtil.addHexPrefix(\n            newOrMutatedTx.getSenderAddress().toString('hex'),\n          ),\n        )\n        const correctAddress = ethUtil.toChecksumAddress(address)\n        if (addressSignedWith !== correctAddress) {\n          throw new Error(\"signature doesn't match the right address\")\n        }\n\n        return newOrMutatedTx\n      }\n      throw new Error(response.payload?.error || 'Unknown error')\n    } catch (e) {\n      throw new Error(e?.toString() ?? 'Unknown error')\n    }\n  }\n\n  async signMessage(withAccount: string, data: string) {\n    return this.signPersonalMessage(withAccount, data)\n  }\n\n  // For personal_sign, we need to prefix the message:\n  async signPersonalMessage(withAccount: string, message: string) {\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((status) => {\n          setTimeout(\n            () => {\n              TrezorConnect.ethereumSignMessage({\n                path: this.#pathFromAddress(withAccount),\n                message: ethUtil.stripHexPrefix(message),\n                hex: true,\n              })\n                .then((response) => {\n                  if (response.success) {\n                    if (\n                      response.payload.address !==\n                      ethUtil.toChecksumAddress(withAccount)\n                    ) {\n                      reject(\n                        new Error('signature doesnt match the right address'),\n                      )\n                    }\n                    const signature = `0x${response.payload.signature}`\n                    resolve(signature)\n                  } else {\n                    reject(\n                      new Error(response.payload?.error || 'Unknown error'),\n                    )\n                  }\n                })\n                .catch((e) => {\n                  reject(new Error(e?.toString() || 'Unknown error'))\n                })\n              // This is necessary to avoid popup collision\n              // between the unlock & sign trezor popups\n            },\n            status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0,\n          )\n        })\n        .catch((e) => {\n          reject(new Error(e?.toString() || 'Unknown error'))\n        })\n    })\n  }\n\n  /**\n   * EIP-712 Sign Typed Data\n   */\n  async signTypedData<T extends MessageTypes>(\n    address: string,\n    data: TypedMessage<T>,\n    { version }: { version: SignTypedDataVersion },\n  ) {\n    const dataWithHashes = transformTypedData(data, version === 'V4')\n\n    // set default values for signTypedData\n    // Trezor is stricter than @metamask/eth-sig-util in what it accepts\n    const {\n      types,\n      message = {},\n      domain = {},\n      primaryType,\n      // snake_case since Trezor uses Protobuf naming conventions here\n      domain_separator_hash, // eslint-disable-line camelcase\n      message_hash, // eslint-disable-line camelcase\n    } = dataWithHashes\n\n    // This is necessary to avoid popup collision\n    // between the unlock & sign trezor popups\n    const status = await this.unlock()\n    await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0)\n\n    const response = await TrezorConnect.ethereumSignTypedData({\n      path: this.#pathFromAddress(address),\n      data: {\n        types: { ...types, EIP712Domain: types.EIP712Domain ?? [] },\n        message,\n        domain,\n        primaryType,\n      },\n      metamask_v4_compat: true, // eslint-disable-line camelcase\n      // Trezor 1 only supports blindly signing hashes\n      domain_separator_hash, // eslint-disable-line camelcase\n      message_hash: message_hash ?? '', // eslint-disable-line camelcase\n    })\n\n    if (response.success) {\n      if (ethUtil.toChecksumAddress(address) !== response.payload.address) {\n        throw new Error('signature doesnt match the right address')\n      }\n      return response.payload.signature\n    }\n\n    throw new Error(response.payload?.error || 'Unknown error')\n  }\n\n  async exportAccount() {\n    return Promise.reject(new Error('Not supported on this device'))\n  }\n\n  forgetDevice() {\n    this.accounts = []\n    this.hdk = new HDKey()\n    this.page = 0\n    this.unlockedAccount = 0\n    this.paths = {}\n  }\n\n  /**\n   * Set the HD path to be used by the keyring. Only known supported HD paths are allowed.\n   *\n   * If the given HD path is already the current HD path, nothing happens. Otherwise the new HD\n   * path is set, and the wallet state is completely reset.\n   *\n   * @throws {Error] Throws if the HD path is not supported.\n   *\n   * @param hdPath - The HD path to set.\n   */\n  setHdPath(hdPath: keyof typeof ALLOWED_HD_PATHS) {\n    if (!ALLOWED_HD_PATHS[hdPath]) {\n      throw new Error(\n        `The setHdPath method does not support setting HD Path to ${hdPath}`,\n      )\n    }\n\n    // Reset HDKey if the path changes\n    if (this.hdPath !== hdPath) {\n      this.hdk = new HDKey()\n      this.accounts = []\n      this.page = 0\n      this.perPage = 5\n      this.unlockedAccount = 0\n      this.paths = {}\n    }\n    this.hdPath = hdPath\n  }\n\n  #normalize(buf: Buffer) {\n    return ethUtil.bufferToHex(buf).toString()\n  }\n\n  #addressFromIndex(basePath: string, i: number) {\n    const dkey = this.hdk.derive(`${basePath}/${i}`)\n    const address = ethUtil\n      .publicToAddress(dkey.publicKey, true)\n      .toString('hex')\n    return ethUtil.toChecksumAddress(`0x${address}`)\n  }\n\n  #pathFromAddress(address: string) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address)\n    let index = this.paths[checksummedAddress]\n    if (typeof index === 'undefined') {\n      for (let i = 0; i < MAX_INDEX; i++) {\n        if (checksummedAddress === this.#addressFromIndex(pathBase, i)) {\n          index = i\n          break\n        }\n      }\n    }\n\n    if (typeof index === 'undefined') {\n      throw new Error('Unknown address')\n    }\n    return `${this.hdPath}/${index}`\n  }\n}\n"]}